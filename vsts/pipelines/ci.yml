parameters:
  - name: buildImages
    type: object
    default:
      - 
        key: Latest
        value: latest
      - 
        key: LtsVersions
        value: ltsversions
      - 
        key: Jamstack
        value: jamstack
      - 
        key: GithubActions
        value: githubactions
      - 
        key: VsoFocal
        value: vso-focal
      - 
        key: Full
        value: full
      - 
        key: Cli
        value: cli
      - 
        key: Buildpack
        value: buildpack

resources:
- repo: self

variables:
  group: Oryx
  Packaging.EnableSBOMSigning: true

stages:
  - stage: CreateReleaseTag
    jobs:
    - job: CreateReleaseTag
      pool:
        name: AzurePipelines-EO
        demands:
          - ImageOverride -equals AzurePipelinesUbuntu20.04compliant
      variables:
        skipComponentGovernanceDetection: true
      steps:
      - checkout: self
        clean: true
        
      - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
        displayName: 'Component Detection - OSS Compliance'
        inputs:
          ignoreDirectories: '$(Build.SourcesDirectory)/tests'  

      - task: ShellScript@2
        inputs:
          scriptPath: ./vsts/scripts/createReleaseTag.sh
        displayName: 'Create release tag'
      - script: |
          set -ex
          sourcesArtifactsDir="$(Build.SourcesDirectory)/artifacts"
          mkdir -p "$sourcesArtifactsDir"
          echo "$(RELEASE_TAG_NAME)" > "$sourcesArtifactsDir/releaseTag.txt"
        displayName: 'Write release tag name to an artifact file'
      - task: PublishPipelineArtifact@1
        displayName: 'Publish artifact file having the release tag name'
        inputs:
          targetPath: $(Build.SourcesDirectory)/artifacts/releaseTag.txt
          artifactName: releaseTag

  - stage: Build
    displayName: Build Stage
    jobs:
    - job: Job_Security
      displayName: Security
      condition: succeeded()
      pool:
        name: Azure Pipelines
        vmImage: windows-2022
      steps:
      - template: templates/_securityChecks.yml

    - job: Job_SignBinaries
      displayName: Sign Oryx Binaries
      pool:
        name: VSEngSS-MicroBuild2022-1ES
        demands:
        - msbuild
        - visualstudio
      variables:
        SignType: 'test'
        skipComponentGovernanceDetection: true
      steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download artifact file having release tag name'
        inputs:
          targetPath: $(Build.SourcesDirectory)/artifacts/releaseTag
          artifactName: 'releaseTag'
      - powershell: |
          $file = "$env:BUILD_SOURCESDIRECTORY\artifacts\releaseTag\releaseTag.txt"
          if (Test-Path $file) {
            $tagName = [IO.File]::ReadAllText($file)
            Write-Host "Content is $tagName"
            echo "##vso[task.setvariable variable=RELEASE_TAG_NAME;]$tagName"
          }
        displayName: 'Set release tag name as environment variable'
      - template: templates/_signBinary.yml
    
      # Job loop for BuildImages
    - ${{ each buildImage in parameters.buildImages }}:
      - job: Job_BuildImage_${{ buildImage.key }}
        displayName: 'Build & Test ${{ buildImage.key }} Build image'
        #dependsOn: Job_SignBinaries
        condition: succeeded()
        timeoutInMinutes: 480
        pool:
          name: AzurePipelines-EO
          demands:
            - ImageOverride -equals AzurePipelinesUbuntu20.04compliant
        variables:
          SignType: $[ dependencies.Job_SignBinaries.outputs['setSignTypeVariable.SignType'] ]  # map in the signtype variable
          skipComponentGovernanceDetection: true

        steps:
        - script: |
            echo "##vso[task.setvariable variable=BuildBuildImages;]true"
            echo "##vso[task.setvariable variable=TestBuildImages;]true"
            echo "##vso[task.setvariable variable=BuildRuntimeImages;]false"
            echo "##vso[task.setvariable variable=TestRuntimeImages;]false"
            echo "##vso[task.setvariable variable=PushBuildImages;]true"
            echo "##vso[task.setvariable variable=PushRuntimeImages;]false"
            echo "##vso[task.setvariable variable=EmbedBuildContextInImages;]true"
          displayName: 'Set variables'

        - template: templates/_setReleaseTag.yml

        - template: templates/_buildTemplate.yml
          parameters:
            imageType: ${{ buildImage.value }}

    - job: Job_RuntimeImages
      displayName: Build and Test Runtime Images
      dependsOn: Job_SignBinaries
      condition: succeeded()
      timeoutInMinutes: 480
      pool:
        name: AzurePipelines-EO
        demands:
          - ImageOverride -equals AzurePipelinesUbuntu20.04compliant
      variables:
        SignType: $[ dependencies.Job_SignBinaries.outputs['setSignTypeVariable.SignType'] ]  # map in the signtype variable
        skipComponentGovernanceDetection: true

      steps:
      - script: |
          echo "##vso[task.setvariable variable=BuildBuildImages;]false"
          echo "##vso[task.setvariable variable=TestBuildImages;]false"
          echo "##vso[task.setvariable variable=BuildRuntimeImages;]true"
          echo "##vso[task.setvariable variable=TestRuntimeImages;]true"
          echo "##vso[task.setvariable variable=PushRuntimeImages;]true"
          echo "##vso[task.setvariable variable=PushBuildImages;]false"
          echo "##vso[task.setvariable variable=EmbedBuildContextInImages;]true"
        displayName: 'Set variables'

      - template: templates/_setReleaseTag.yml

      - template: templates/_buildTemplate.yml

    - template: templates/_integrationJobTemplate.yml

  - stage: Release
    displayName: Release Stage
    dependsOn: Build
    condition: >
      and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),
      startsWith(variables['Build.SourceBranch'],'refs/heads/patch/'),
      startsWith(variables['Build.SourceBranch'],'refs/heads/exp/')))

    jobs:
    - template: templates/_releaseJobTemplate.yml

trigger: none